package lambda.practical;

public class Car {
	String make, model, color;
	int price;
	public Car(String make, String model, String color, int price) {
		super();
		this.make = make;
		this.model = model;
		this.color = color;
		this.price = price;
	}
	public String getMake() {
		return make;
	}
	public void setMake(String make) {
		this.make = make;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	
	public void printCar() {
		System.out.println(this);
	}
	
	@Override
	public String toString() {
		return "Car [make=" + make + ", model=" + model + ", color=" + color + ", price=" + price + "]";
	}
	
	
}


package lambda.practical;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;

public class App {

	public static void main(String[] args) {
		
		List<Car> cars = Arrays.asList(
				new Car("Honda", "Accord", "Red", 22300),
				new Car("Honda", "Civic", "Blue", 17700),
				new Car("Toyota", "Land Cruiser", "White", 48500),
				new Car("Toyota", "Corolla", "Black", 16200),
				new Car("Toyota", "Camry", "Blue", 24000),
				new Car("Nissan", "Sentra", "White", 17300),
				new Car("Mitsubishi", "Lancer", "White", 20000),
				new Car("Jeep", "Wrangler", "Red", 24500)
				);
		
	        Function<Car, String>priceAndColor = (c)-> " price = " + c.getPrice() + " color = " + c.getColor();
	        String  stringcar = priceAndColor.apply(cars.get(0));
	        System.out.println(stringcar);
		
//			printCarsPriceRange(cars, 18000, 22000);
//			printCarByColor(cars, "Red");
//		System.out.println("Printing cars between price 18000 and 22000");		    	    
//		    printCars(cars, (c)-> c.getPrice() >= 18000 && c.getPrice() <= 22000);
//		    
//		    System.out.println("Print blue cars");
//		    printCars(cars, (c)-> c.getColor().equals("Blue"));
		    
	}
		
	public static void printCars(List<Car>cars, Predicate<Car>predicate) {
		for(Car c: cars) {
			if(predicate.test(c)) {
				c.printCar();
			}
		}
	}
		
}			
