// LearnConcurrencyUtils (Project Name)
package com.jobready.threadpools;

public class MessageProcessor implements Runnable{
	
	private int message;
	
	public MessageProcessor(int message) {
		this.message = message;
		
	}

	@Override
	public void run() {
		
		System.out.println(Thread.currentThread().getName() + " [RECEIVED] Message = " + message);
		respondToMessage();// make thread sleep to simulate doing some work
		System.out.println(Thread.currentThread().getName() + " [DONE] Processing Message = " + message);
		
	}

	private void respondToMessage() {
		
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			System.out.println("Unable to process message " + message);
		}
		
	}

}


package com.jobready.threadpools;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ThreadPoolDemo {

	public static void main(String[] args) {
		
		ExecutorService executor = Executors.newFixedThreadPool(2); // recycle threads
		
		Runnable processor = new MessageProcessor(2);
		executor.execute(processor);
		
		Runnable processor2 = new MessageProcessor(3);
		executor.execute(processor2);
		
		Runnable processor3 = new MessageProcessor(4);
		executor.execute(processor3);
		
		Runnable processor4 = new MessageProcessor(4);
		executor.execute(processor4);
		
 		executor.shutdown(); // Rejects any new tasks from being submitted.Gracefully shuts down the service

 		try {
			executor.awaitTermination(2,TimeUnit.SECONDS);
		} catch (InterruptedException e) {
		}
 		
		while(!executor.isTerminated()) {
			
	   }
		
		System.out.println("submitted all tasks...");
	
	}

}
