package com.jobready.producerconsumer;

import java.util.concurrent.BlockingQueue;

public class Producer implements Runnable {
	
	int questionNo;
	BlockingQueue<Integer>questionQueue;
	public Producer(BlockingQueue<Integer>questionQueue) {
		this.questionQueue = questionQueue;
		
	}
	
	@Override
	public void run() {
		while(true) {	
		try {
			synchronized(this) {
				int nextQuestion = questionNo++;
				System.out.println("Got new Question: " + nextQuestion);
			    questionQueue.put(nextQuestion);
			}
		} catch (InterruptedException e) {
		}
		}
	}
}


package com.jobready.producerconsumer;

import java.util.concurrent.BlockingQueue;

public class Consumer implements Runnable {
	
	BlockingQueue<Integer>questionQueue;
	public Consumer(BlockingQueue<Integer>questionQueue) {
		this.questionQueue = questionQueue;
		
	}
	
	@Override
	public void run() {
		while(true) {
		
		try {
			Thread.sleep(1000);
			System.out.println("ANSWERED QUESTION: "+ questionQueue.take());
		} catch (InterruptedException e) {
		}
		}
	}

}


package com.jobready.producerconsumer;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class Application {
	
	public static void main(String[] args) {
		
		BlockingQueue<Integer>questionQueue = new ArrayBlockingQueue<Integer>(5);
		
		Thread t1 = new Thread(new Producer(questionQueue));
		Thread t2 = new Thread(new Consumer(questionQueue));
		
		t1.start();
		t2.start();
	}

}
